# This is a canonical dts test spec used for testing and low-level documentation.

# Genereal principles of a dts test spec:

# A dts test spec describes a set of test *cases*, which are used to define
# data sources and the expected results following some set of data transformations.
# Test *cases* can be grouped into *scenarios* that share some common set of data
# sources or data targets.

# A test spec is used to test the behavior of a single execution of a
# set of data transformations.  The data transformations may involve
# multiple steps with multiple data sources and targets.
# With dts, we define all of test source data and expectations up front.  If
# there are multiple test cases that use the same source data, then each test
# case will "stack" (concantenate) data for that source.

# After the test spec is defined, dts will respond will all of the stacked
# data sources.  The user will then inject those test data sources into whatever
# system they are using to run the data transformations.  They will then run
# the transformations and collect all of the resulting target data.

# The target data is then loaded back into the dts test api, and data assertions
# are run to ensure that the actual result data conforms to the
# expected data specified in the test spec.

---
version: '0.1'

# Factories will represent a collection of test data.
# Scenarios are a colletion of test cases that concern some shared topic.
#   - The code being tested is expected to run only 1 time for a scenario.
#   - One run could be associated with multiple scenarios, up to user to decide
# Cases will contain assertions about the results of a run
#  - they can also contain additional conditions about data defined in a scenario

# Identifiers are used to identify specific records and group them into test cases
# Identifiers are shared across all scenarios
# They
identifiers:
  # this is the "students" identifier.  It has 3 different attributes, any of which can be
  # used identify a record as a student.
  - identifier: students
    attributes:
      # Generators indicate how the unique identifier should be created.
      # Note that dts treats all data as string, but this will be a string that can be converted
      #  into an integer
      - field: id
        generator: unique_integer
      - field: uuid
        generator: uuid
      - field: external_id
        generator: unique_string
        # Additional keys can be used as optional arguments to the generators
        prefix: stu

  # Multiple identifiers can be defined.  The unique attributes created may end up the same
  #  as other identifiers.
  - identifier: schools
    attributes:
      - field: id
        generator: unique_integer

  - identifier: classes
    attributes:
      - field: id
        generator: unique_integer
      - field: external_id
        generator: unique_string



# Defines all of the data sources that are needed to run the projects.
# The main output of the first phase of testing is data for all of the sources
sources:
  # Give each source a name.  User must map them onto their own names.
  # Here's an example of a schema.table source that would easily map to a Redshift table
  - source: itk_api.students
    # Unless otherwise specified by a factory, sources can be populated with default values
    defaults:
      - column: first_name
        value: Bob
    # Sources should usually be associated with an identifier.  We map the
    # columns of the source to an appropriate attribute of the identifier.
    identifier_map:
      - column: id
        identifier:
          name: students
          attribute: id
      - column: external_id
        identifier:
          name: students
          attribute: id

  - source: itk_api.schools
    identifier_map:
      - column: id
        identifier:
          name: schools
          attribute: id

  # Sources don't need to have identifiers if they won't be used to identify target records
  - source: itk_api.classes
    defaults:
      - column: name
        value: Some Class

targets:
  - target: denormalized_students
    identifier_map:
      - column: student_id
        identifier:
          name: students
          attribute: external_id

factories:
  - factory: CanonicalStudent
    description: Simple easy student, tied to a school, no classes

    data:
      - source: itk_api.students
        table: |
          | id   | uuid   | school_id   | first_name |
          | -    | -      | -           | -          |
          | stu1 | stu1   | sch1        | Buffy      |
          | stu2 | stu2   | sch1        | Willow     |
          | stu3 | stu3   | sch2        | Bill       |
          | stu4 | stu4   | sch2        | Ted        |
        values:
          - column: last_name
            value: Unknown

      - source: itk_api.schools
        table: |
          | id   | name      |
          | -    | -         |
          | sch1 | Sunnydale |
          | sch2 | San Dimas |


  - factory: StudentWithClasses
    parents:
      - CanonicalStudent

    data:
      - source: itk_api.classes
        table: |
          | student_id | name            |
          | -          | -               |
          | stu1       | Applied Stabby  |
          | stu2       | Good Spells     |
          | stu3       | Station         |
          | stu4       | Being Excellent |

scenarios:
  - scenario: DenormalizingStudentClasses
    description: Some tests about denormalizing the student-class data
    # implies that all cases in this scenario will inherit from this factory
    factories:
      - StudentWithClasses

    cases:
      - case: BasicDenormalization
        description: A canonical example of denormalization
        expected:
          data:
            - target: denormalized_students
              table: |
                | student_id | first_name | school_name | class_name      |
                | -          | -          | -           | -               |
                | stu1       | Buffy      | Sunnydale   | Applied Stabby  |
                | stu2       | Willow     | Sunnydale   | Good Spells     |
                | stu3       | Bill       | San Dimas   | Station         |
                | stu4       | Ted        | San Dimas   | Being Excellent |
              # Order not always predictable.  Use the by clause to order prior to comparison
              by:
                - student_id


      - case: MissingClasses
        description: Students without classes are excluded from denormalized table
        factory:
          data:
            - source: itk_api.classes
              table: |
                | student_id | name            |
                | -          | -               |
                | stu1       | Applied Stabby  |
                | stu2       | Good Spells     |

        expected:
          data:
            - target: denormalized_students
              table: |
                | student_id | first_name | school_name | class_name      |
                | -          | -          | -           | -               |
                | stu1       | Buffy      | Sunnydale   | Applied Stabby  |
                | stu2       | Willow     | Sunnydale   | Good Spells     |
              by:
                - student_id

      - case: MultipleClasses
        description: Students with multiple classes have multiple records
        factory:
          data:
            - source: itk_api.classes
              table: |
                | student_id | name            |
                | -          | -               |
                | stu1       | Applied Stabby  |
                | stu2       | Good Spells     |
                | stu2       | Season 6 Spells |
                | stu3       | Station         |
                | stu4       | Being Excellent |
                | stu4       | Station         |

        expected:
          data:
            - target: denormalized_students
              table: |
                | student_id | first_name | school_name | class_name      |
                | -          | -          | -           | -               |
                | stu1       | Buffy      | Sunnydale   | Applied Stabby  |
                | stu2       | Willow     | Sunnydale   | Good Spells     |
                | stu2       | Willow     | Sunnydale   | Season 6 Spells |
                | stu3       | Bill       | San Dimas   | Station         |
                | stu4       | Ted        | San Dimas   | Being Excellent |
                | stu4       | Ted        | San Dimas   | Station         |
              # Order not always predictable.  Use the by clause to order prior to comparison
              by:
                - student_id
                - class_name
